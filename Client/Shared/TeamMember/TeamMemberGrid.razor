@using Data.TeamMember.Model;
@inject HttpClient Http
@inject IDialogService DialogService

@if (teamMembers == null && loadExecuting)
{
    <MudItem xs="12" Class="d-flex justify-center py-8">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudItem>
}
else
{
    <MudItem xs="12" Class="d-flex justify-content-end">
        <MudIconButton @onclick="OpenAddDialog" Icon="@Icons.Material.Outlined.AddBox" Color="Color.Tertiary" Size="Size.Large" />
    </MudItem>
    <MudItem xs="12">
        <MudDataGrid Items="@teamMembers" Filterable="false" SortMode="@SortMode.None" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.FirstName" Title="First Name" />
                <PropertyColumn Property="x => x.LastName" Title="Last Name" />
                <PropertyColumn Property="x => x.EmailAddress" Title="Email" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Error" @onclick="() => Delete(context.Item)">Delete</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudItem>
}

@code {
    private TeamMember[] teamMembers = new TeamMember[] { };
    private bool loadExecuting = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeamData();
    }

    private async Task OpenAddDialog()
    {
        var dialog = DialogService.Show<AddTeamMemberDialog>("Add Team Member", new DialogOptions
            {

                MaxWidth = MaxWidth.Small,
                FullWidth = true
            });

        var result = await dialog.Result;

        if (!result.Cancelled)
            await LoadTeamData();
    }

    private async Task LoadTeamData()
    {
        try
        {
            teamMembers = await Http.GetFromJsonAsync<TeamMember[]>("/api/teammembers") ?? new TeamMember[] { };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        loadExecuting = false;
    }

    private async Task Delete(TeamMember teamMember)
    {
        try
        {
            await Http.DeleteFromJsonAsync<TeamMember>($"/api/teammember/{teamMember.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        await LoadTeamData();
    }
}
